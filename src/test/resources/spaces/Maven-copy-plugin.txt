= Introduction =


Most build scripts or applications operate with lots and lots of archives: big, small, huge, <code>'''"*.zip"'''</code>, and <code>'''"*.tar.gz"'''</code>. Their content comes from various resources: files, directories, Maven dependencies and other archives, sometimes downloaded from HTTP or FTP. The resulting archives may need to become Maven artifacts and occasionally uploaded back to FTP or SCP.


Traditionally, Maven's way to deal with this kind of tasks was lengthy and unclear:


{| border="1" cellspacing="0" cellpadding="5"
|-
| [http://maven.apache.org/plugins/maven-resources-plugin/ <code>'''"maven-resources-plugin"'''</code>]
| allows to [http://maven.apache.org/plugins/maven-resources-plugin/copy-resources-mojo.html copy] resources
|-
| [http://maven.apache.org/plugins/maven-dependency-plugin/ <code>'''"maven-dependency-plugin"'''</code>]
| allows to [http://maven.apache.org/plugins/maven-dependency-plugin/copy-dependencies-mojo.html copy] and [http://maven.apache.org/plugins/maven-dependency-plugin/unpack-dependencies-mojo.html unpack] dependencies
|-
| [http://mojo.codehaus.org/truezip-maven-plugin/ <code>'''"truezip-maven-plugin"'''</code>]
| allows to [http://mojo.codehaus.org/truezip-maven-plugin/copy-mojo.html unpack and pack] archives
|-
| [http://maven.apache.org/plugins/maven-assembly-plugin/ <code>'''"maven-assembly-plugin"'''</code>]
| also allows to [http://maven.apache.org/plugins/maven-assembly-plugin/ pack] archives
|-
| [http://mojo.codehaus.org/build-helper-maven-plugin/ <code>'''"build-helper-maven-plugin"'''</code>]
| allows to [http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html attach] created archives as Maven artifacts
|-
| [http://maven.apache.org/plugins/maven-antrun-plugin/ <code>'''"maven-antrun-plugin"'''</code>]
| provides required networking support for [http://evgeny-goldin.org/javadoc/ant/Tasks/ftp.html FTP] and [http://evgeny-goldin.org/javadoc/ant/Tasks/scp.html SCP], also used for [http://evgeny-goldin.org/javadoc/ant/Tasks/zip.html archiving] [http://evgeny-goldin.org/javadoc/ant/Tasks/pack.html needs]
|}


Eventually, when one needs to perform above operations, the result is usually a messy POM with quite a few plugin configurations and Ant snippets. <code>'''"maven-copy-plugin"'''</code> solves this issue and provides an elegant solution for all above tasks. It allows you to ''easily'' perform and configure the following operations:

# [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|'''Copy''']] files, directories and [[#Copying dependencies|Maven dependencies]].
# [[#<filtering>|'''Filter''']] and [[#<replaces>|'''replace''']] text files as they're copied.
# [[#Packing archives: <pack>|'''Pack''']], [[#Updating existing archives|'''update''']], and [[#Unpacking archives: <unpack>|'''unpack''']] archives, [[#Unpacking <zipEntries>|zip entries]] and Maven [[#Packing and unpacking <dependencies>|<dependencies>]].
# [[#Attaching archives as Maven artifact: <attachArtifact>|'''Attach''']] archives created as Maven artifacts or [[#Deploying artifacts: <deploy>|'''deploy''']] them directly to Maven repository manager.
# [[#Downloading files: HTTP, SCP, FTP|'''Download''']] and [[#Uploading files: SCP, FTP|'''upload''']] archives from and to '''HTTP''', '''SCP''', and '''FTP'''.
# Use Groovy [[#Groovy "extension points"|'''"extension points"''']] for [[#Replacing text content|text replaces]], files [[#Filtering files: <filter>|filtering]] and [[#Post-processing files: <process>|post-processing]].


= Details =

{| border="1" cellspacing="0" cellpadding="5" class="wikitable"
|-
!
! Provided By
!
|-
| align="center" | '''Mailing List'''
| align="center" | [http://nabble.com/ Nabble]
|
* [http://maven-plugins.994461.n3.nabble.com <code>'''maven-plugins.994461.n3.nabble.com'''</code>]
|-
| align="center" | '''Source Code'''
| align="center" | [http://github.com/ GitHub]
|
* [http://github.com/evgeny-goldin/maven-plugins/tree/master/maven-copy-plugin <code>'''github.com/evgeny-goldin/maven-plugins/tree/master/maven-copy-plugin'''</code>]
|-
| align="center" | '''Tests'''
| align="center" | [http://github.com/ GitHub]
|
* [http://github.com/evgeny-goldin/maven-plugins-test/tree/master/maven-copy-plugin <code>'''github.com/evgeny-goldin/maven-plugins-test/tree/master/maven-copy-plugin'''</code>]
|-
| align="center" | '''GroovyDoc'''
| align="center" | [http://docs.codehaus.org/display/GROOVY/The+groovydoc+Ant+task <code>'''<groovydoc>'''</code>]
|
* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5 <code>'''evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5'''</code>]
* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5/com/goldin/plugins/copy/CopyMojo.html <code>'''com.goldin.plugins.copy.CopyMojo'''</code>]
|-
| align="center" | '''Issue Tracker'''
| align="center" | [http://www.jetbrains.com/youtrack/ YouTrack]
|
* [http://evgeny-goldin.org/youtrack/issues/pl?q=subsystem%3A+maven-copy-plugin+ <code>'''evgeny-goldin.org/youtrack/issues/pl'''</code>]
|-
| align="center" | '''Build Server'''
| align="center" | [http://maven.apache.org/ Maven]<br/>[http://www.jetbrains.com/teamcity/ TeamCity]
|
* [http://evgeny-goldin.org/teamcity/guestLogin.html?guest=1 Login] as a Guest User
* [http://evgeny-goldin.org/teamcity/project.html?projectId=project2 <code>'''maven-plugins'''</code>]
* [http://evgeny-goldin.org/teamcity/project.html?projectId=project3 <code>'''maven-plugins-test'''</code>]
|-
| align="center" | '''Maven Coordinates'''
|
|
* <code>'''com.goldin.plugins:maven-copy-plugin:0.2.3.5'''</code>
* <code>'''com.goldin.plugins:maven-copy-plugin:0.3-SNAPSHOT'''</code>
|-
| align="center" | '''Maven Repository'''
| align="center" | [http://www.jfrog.org/ Artifactory]
|
* [http://evgeny-goldin.org/artifactory/repo/ <code>'''evgeny-goldin.org/artifactory/repo/'''</code>]
|}



= Example =

Full documentation is [[#<configuration>|provided]] below this quick example, demonstrating some common operations:
* Resources, directories and <dependencies> are copied
* Two data archives, provided as <dependency>, are unpacked
* Result is packed as <code>'''"zipName.zip"'''</code>, attached as Maven artifact


<syntaxhighlight lang="xml">
<plugin>
    <groupId>com.goldin.plugins</groupId>
    <artifactId>maven-copy-plugin</artifactId>
    <version>0.2.3.5</version>
    <executions>
        <execution>
            <id>create-archive</id>
            <phase>package</phase>
            <goals>
                <goal>copy</goal>
            </goals>
            <configuration>
                <resources>
                    <!-- ~~~~~~~~~~~~~~ -->
                    <!-- Copy resources -->
                    <!-- ~~~~~~~~~~~~~~ -->
                    <resource>
                        <targetPath>${project.build.outputDirectory}/scripts</targetPath>
                        <directory>${project.basedir}/src/main/resources</directory>
                        <includes>
                            <include>bat/setenv*.bat, bat/wrapper*.bat, bat/install*.bat, bat/uninstall*.bat</include>
                            <include>lib/core</include>
                            <include>*.jar</include>
                        </includes>
                    </resource>
                    <resource>
                        <targetPath>${project.build.outputDirectory}/scripts</targetPath>
                        <directory>${project.basedir}/conf</directory>
                        <include>resources, scripts</include>
                    </resource>
                    <!-- ~~~~~~~~~~~~~~ -->
                    <!-- Copy directory -->
                    <!-- ~~~~~~~~~~~~~~ -->
                    <resource>
                        <targetPath>${project.build.outputDirectory}/spring</targetPath>
                        <directory>${project.basedir}/src/main/resources/spring</directory>
                    </resource>
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <!-- Copy "compile" dependencies -->
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <resource>
                        <targetPath>${project.build.outputDirectory}/lib</targetPath>
                        <dependency>
                            <includeScope>compile</includeScope>
                        </dependency>
                    </resource>
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <!-- Unpack two data archives -->
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <resource>
                        <targetPath>${project.build.outputDirectory}/data</targetPath>
                        <dependencies>
                            <dependency>
                                <groupId>someData</groupId>
                                <artifactId>dependencyArchive</artifactId>
                            </dependency>
                            <dependency>
                                <groupId>anotherData</groupId>
                                <artifactId>dependencyArchive</artifactId>
                            </dependency>
                        </dependencies>
                        <unpack>true</unpack>
                    </resource>
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <!-- Create final archive and attach it as Maven artifact -->
                    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
                    <resource>
                        <targetPath>${project.build.directory}/zipName.zip</targetPath>
                        <directory>${project.build.outputDirectory}</directory>
                        <pack>true</pack>
                        <attachArtifact>true</attachArtifact>
                    </resource>
                </resources>
            </configuration>
        </execution>
    </executions>
</plugin>
</syntaxhighlight>


= <configuration> =

You configure the plugin by specifying a number of <code>'''<resources>'''</code> or a single <code>'''<resource>'''</code>:

<syntaxhighlight lang="xml">
<!-- Specifying multiple <resources> -->
<configuration>
    <resources>
        <resource>
            <targetPath> .. </targetPath>
            ...
        </resource>
        <resource>
            <targetPath> .. </targetPath>
            ...
        </resource>
    </resources>
</configuration>

<!-- Specifying single <resource> -->
<configuration>
    <resource>
        <targetPath> .. </targetPath>
        ...
    </resource>
</configuration>
</syntaxhighlight>


* Each <code>'''<resource>'''</code> specifies an action to be performed and result to be stored in the <code>'''<targetPath>'''</code>: something to [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|copy]], [[#Packing archives: <pack>|pack]] or [[#Unpacking archives: <unpack>|unpack]]. All <code>'''<resources>'''</code> are executed in the order they're specified, there's no parallel execution.

* It is possible to specify a single <code>'''<resource>'''</code> instead of multiply <code>'''<resources>'''</code>. You will see this pattern in many other places: whenever there is a single entity - there's no need to wrap it with "plurals" tag. Following tags can be shortened this way:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable"
|-
! Single
! Plural
|-
| align="center" | <code>'''<resource>'''</code>
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<resources>'''</code>]]
|-
| align="center" | <code>'''<targetPath>'''</code>
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<targetPaths>'''</code>]]
|-
| align="center" | <code>'''<include>'''</code>
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<includes>'''</code>]]
|-
| align="center" | <code>'''<exclude>'''</code>
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<excludes>'''</code>]]
|-
| align="center" | <code>'''<dependency>'''</code>
| align="center" | [[#Copying dependencies|<code>'''<dependencies>'''</code>]]
|-
| align="center" | <code>'''<replace>'''</code>
| align="center" | [[#<replaces>|<code>'''<replaces>'''</code>]]
|-
| align="center" | <code>'''<zipEntry>'''</code>
| align="center" | [[#Unpacking <zipEntries>|<code>'''<zipEntries>'''</code>]]
|-
| align="center" | <code>'''<classpath>'''</code>
| align="center" | [[#Supporting Groovy classes with <classpath>|<code>'''<classpaths>'''</code>]]
|}


== <configuration> ==

* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5/com/goldin/plugins/copy/CopyMojo.html <code>'''com.goldin.plugins.copy.CopyMojo'''</code>]:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable" style="width:100%"
|-
! style="width:15%" | Name
! style="width:10%" | Default value
! style="width:75%" | Description
|-
| align="center" | [[#<runIf>|<code>'''<runIf>'''</code>]]
| align="center" |
| Controls whether or not plugin should be executed
|-
| align="center" | [[#<skipIdentical>|<code>'''<skipIdentical>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether identical files should not be copied
|-
| align="center" | [[#<defaultExcludes>|<code>'''<defaultExcludes>'''</code>]]
| align="center" | See [[#<defaultExcludes>|below]]
| Comma-separated patterns of files to be excluded from copy, pack, unpack or clean operations
|-
| align="center" | [[#<verbose>|<code>'''<verbose>'''</code>]]
| align="center" | <code>'''true'''</code>
| Controls logging verbosity
|-
| align="center" | [[#Bat files are not filtered - use <filterWithDollarOnly>|<code>'''<filterWithDollarOnly>'''</code>]]
| align="center" | <code>'''false'''</code>
| Controls whether only <code>'''${ .. }'''</code> expressions should be filtered
|-
| align="center" | [[#<filtering>|<code>'''<nonFilteredExtensions>'''</code>]]
|
| Comma-separated list of file extensions that shouldn't be filtered
|-
| align="center" | [[#<failIfNotFound>|<code>'''<failIfNotFound>'''</code>]]
| align="center" | <code>'''true'''</code>
| Controls whether execution should fail if no files were found to copy, pack, unpack or clean
|-
| align="center" | [[#Choosing between TrueZip and Ant|<code>'''<useTrueZipForPack>'''</code>]]
| align="center" | <code>'''false'''</code>
| Controls whether [http://truezip.java.net/ TrueZip] library (or Ant) should be used when archives are packed
|-
| align="center" | [[#Choosing between TrueZip and Ant|<code>'''<useTrueZipForUnpack>'''</code>]]
| align="center" | <code>'''true'''</code>
| Controls whether [http://truezip.java.net/ TrueZip] library (or Ant) should be used when archives are unpacked
|-
| align="center" | [[#<resource>|<code>'''<resource> / <resources>'''</code>]]
| align="center" |
| List of resources to perform operations on
|-
| align="center" | [[#<groovyConfig>|<code>'''<groovyConfig>'''</code>]]
| align="center" |
| Allows to control Groovy execution environment and logging verbosity
|}


== <resource> ==

* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5/com/goldin/plugins/copy/CopyResource.html <code>'''com.goldin.plugins.copy.CopyResource'''</code>]:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable" style="width:100%"
|-
! style="width:15%" | Name
! style="width:10%" | Default value
! style="width:75%" | Description
|-
| colspan="3" | <u>General Configurations</u>
|-
| align="center" | [[#<runIf>|<code>'''<runIf>'''</code>]]
| align="center" |
| Controls whether or not this <code>'''<resource>'''</code> should be executed
|-
| align="center" | [[#<description>|<code>'''<description>'''</code>]]
| align="center" |
| Allows to provide a textual description to <code>'''<resource>'''</code> and time its execution in milliseconds
|-
| align="center" | [[#Copying files to locations specified externally - <targetRoots>|<code>'''<targetRoots>'''</code>]]
| align="center" |
| Comma-separated list of directories to prepend to <code>'''<targetPath> / <targetPaths>'''</code>
|-
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<targetPath> / <targetPaths>'''</code>]]
| align="center" |
| Target directory or [[#Uploading files: SCP, FTP|network location]] to copy, unpack or upload files '''''to'''''
|-
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<directory>'''</code>]]
| align="center" |
| Source directory or [[#Downloading files: HTTP, SCP, FTP|network location]] to copy, pack or download files '''''from'''''
|-
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<include> / <includes>'''</code>]]
| align="center" |
| Comma-separated patterns of files to be included in copy, pack, unpack or clean operation
|-
| align="center" | [[#Copying directories and files: <directory> + <includes> - <excludes> = <targetPath>|<code>'''<exclude> / <excludes>'''</code>]]
| align="center" |
| Comma-separated patterns of files to be excluded from copy, pack, unpack or clean operation
|-
| align="center" | [[#Copying "shortcuts"|<code>'''<file>'''</code>]]
| align="center" |
| Specifies a single file to copy, pack or unpack as alternative to <code>'''<directory>'''</code> and <code>'''<include>'''</code> combination
|-
| align="center" | [[#<dependency>|<code>'''<dependency> / <dependencies>'''</code>]]
| align="center" |
| Maven dependencies to copy, pack or unpack
|-
| align="center" | <code>'''<dependenciesAtM2>'''</code>
| align="center" | <code>'''true'''</code>
| Specifies whether <code>'''<dependencies>'''</code> should be copied or unpacked directly from local Maven repository
|-
| align="center" | [[#<defaultExcludes>|<code>'''<defaultExcludes>'''</code>]]
| align="center" | See [[#<defaultExcludes>|below]]
| Comma-separated patterns of files to always be excluded from copy, pack, unpack or clean operations
|-
| align="center" | [[#<verbose>|<code>'''<verbose>'''</code>]]
| align="center" | <code>'''true'''</code>
| Controls logging verbosity of this <code>'''<resource>'''</code>
|-
| align="center" | [[#<failIfNotFound>|<code>'''<failIfNotFound>'''</code>]]
| align="center" | <code>'''true'''</code>
| Controls whether execution should fail if no files were found to copy, pack, unpack or clean in this <code>'''<resource>'''</code>
|-
| colspan="3" | <u>Copying files and <dependencies></u>
|-
| align="center" | [[#Moving files with <move>|<code>'''<move>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether files should be moved instead of being copied
|-
| align="center" | [[#<skipIdentical>|<code>'''<skipIdentical>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether identical files should not be copied
|-
| align="center" | [[#Copying "shortcuts"|<code>'''<destFileName>'''</code>]]
| align="center" |
| Destination file name
|-
| align="center" | [[#Keeping relative paths when copying: <preservePath>|<code>'''<preservePath>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether file relative path should be preserved when copying it to new location
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<stripVersion>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether <code>'''<dependency>'''</code> version should be removed from archive name when it is copied
|-
| colspan="3" | <u>Filtering files</u>
|-
| align="center" | [[#<filtering>|<code>'''<filtering>'''</code>]]
| align="center" | <code>'''false'''</code>
| Whether Maven [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html filtering] should be applied when files are copied
|-
| align="center" | [[#Bat files are not filtered - use <filterWithDollarOnly>|<code>'''<filterWithDollarOnly>'''</code>]]
|
| Controls whether only <code>'''${ .. }'''</code> expressions should be filtered
|-
| align="center" | [[#<filtering>|<code>'''<nonFilteredExtensions>'''</code>]]
|
| Comma-separated list of file extensions that shouldn't be filtered
|-
| align="center" | [[#Filtering and replacing text files|<code>'''<encoding>'''</code>]]
| align="center" | <code>'''UTF-8'''</code>
| Specifies encoding to use
|-
| colspan="3" | <u>Replacing content</u>
|-
| align="center" | [[#<replace>|<code>'''<replace> / <replaces>'''</code>]]
| align="center" |
| Allows to replace content of files copied with regex matches and Groovy substitutions
|-
| align="center" | [[#Filtering and replacing text files|<code>'''<encoding>'''</code>]]
| align="center" | <code>'''UTF-8'''</code>
| Specifies encoding to use
|-
| colspan="3" | <u>Packing archives</u>
|-
| align="center" | [[#Packing archives: <pack>|<code>'''<pack>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether <code>'''<targetPath>'''</code> archive should be packed
|-
| align="center" | [[#Choosing between TrueZip and Ant|<code>'''<useTrueZipForPack>'''</code>]]
|
| Controls whether [http://truezip.java.net/ TrueZip] library (or Ant) should be used
|-
| align="center" | [[#Updating existing archives|<code>'''<update>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies if archive should be updated as opposed to creating it from scratch
|-
| align="center" | [[#Controlling file prefix with <prefix>|<code>'''<prefix>'''</code>]]
|
| Prefix to be used in the archive
|-
| align="center" | [[#Controlling file location with <destFileName>|<code>'''<destFileName>'''</code>]]
| align="center" |
| Destination file name in the archive
|-
| align="center" | [[#Attaching archives as Maven artifact: <attachArtifact>|<code>'''<attachArtifact>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether to attach archive created as Maven artifact, similarly to [http://mojo.codehaus.org/build-helper-maven-plugin/attach-artifact-mojo.html <code>'''"build-helper-maven-plugin:attach-artifact"'''</code>]
|-
| align="center" | [[#Maven coordinates: <artifactClassifier>|<code>'''<artifactClassifier>'''</code>]]
| align="center" |
| Specifies artifact's classifier when archive created is attached as Maven artifact with <code>'''<attachArtifact>'''</code>
|-
| colspan="3" | <u>Unpacking archives and <dependencies></u>
|-
| align="center" | [[#Unpacking archives: <unpack>|<code>'''<unpack>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether archives or dependencies should be unpacked
|-
| align="center" | [[#Choosing between TrueZip and Ant|<code>'''<useTrueZipForUnpack>'''</code>]]
|
| Controls whether [http://truezip.java.net/ TrueZip] library (or Ant) should be used
|-
| align="center" | [[#Unpacking <zipEntries>|<code>'''<zipEntry> / <zipEntries>'''</code>]]
| align="center" |
| Allows to specify ZIP entries to unpack instead of unpacking complete archive. Patterns are supported
|-
| colspan="3" | <u>Groovy extension points</u>
|-
| align="center" | [[#Filtering files: <filter>|<code>'''<filter>'''</code>]]
| align="center" |
| Groovy expression to filter files, specified as <code>'''"List<File> files"'''</code> Groovy variable
|-
| align="center" | [[#Post-processing files: <process>|<code>'''<process>'''</code>]]
| align="center" |
| Groovy expression to post-process files, specified as <code>'''"List<File> files"'''</code> Groovy variable
|-
| colspan="3" | <u>FTP Download</u>
|-
| align="center" | [[#Downloading files - advanced FTP|<code>'''<retries>'''</code>]]
| align="center" | <code>'''5'''</code>
| Specifies FTP download attempts
|-
| align="center" | [[#Downloading files - advanced FTP|<code>'''<timeout>'''</code>]]
| align="center" | <code>'''3600'''</code>
| Specifies FTP download timeout, in seconds
|-
| align="center" | [[#Downloading files - FTP with "wget" and <listFilter>|<code>'''<wget>'''</code>]]
| align="center" |
| Specifies FTP download to list files first and download them with <code>'''"wget"'''</code>
|-
| align="center" | [[#Downloading files - FTP with "wget" and <listFilter>|<code>'''<listFilter>'''</code>]]
| align="center" |
| When <code>'''<wget>'''</code> is used - Groovy expression to filter files downloaded from FTP server, specified as <code>'''"Map<String, Long> files"'''</code> Groovy variable
|-
| colspan="3" | <u>Other operations</u>
|-
| align="center" | [[#<clean>|<code>'''<clean>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether to delete files matched by <code>'''<directory>'''</code> + <code>'''<includes>'''</code> - <code>'''<excludes>'''</code> patterns
|-
| align="center" | [[#<clean>|<code>'''<cleanEmptyDirectories>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether to delete empty directories left after <code>'''<clean>'''</code> operation
|-
| align="center" | [[#<mkdir>|<code>'''<mkdir>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether to create <code>'''<targetPath>'''</code> / <code>'''<targetPaths>'''</code> directory or directories
|-
| align="center" | [[#Deploying artifacts: <deploy>|<code>'''<deploy>'''</code>]]
| align="center" |
| Allows to deploy archive created to Maven repository and coordinates specified
|}


== <replace> ==

* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5/com/goldin/plugins/common/Replace.html <code>'''com.goldin.plugins.common.Replace'''</code>]:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable" style="width:100%"
|-
! style="width:15%" | Name
! style="width:10%" | Default value
! style="width:75%" | Description
|-
| align="center" | [[#<replaces>|<code>'''<from>'''</code>]]
| align="center" |
| Regular expression of content to be replaced, all content is replaced if omitted
|-
| align="center" | [[#<replaces>|<code>'''<to>'''</code>]]
| align="center" |
| Replacement content
|-
| align="center" | [[#<replaces>|<code>'''<endOfLine>'''</code>]]
| align="center" |
| "End of line" to use in replacement content
|-
| align="center" | [[#<replaces>|<code>'''<addDollar>'''</code>]]
| align="center" |
| Allows to convert <code>'''{expression}'''</code> to <code>'''${expression}'''</code> in replacement content to prevent Maven interpolation
|-
| align="center" | [[#<replaces>|<code>'''<quoteReplacement>'''</code>]]
| align="center" | <code>'''false'''</code>
| Allows to [http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String) quote] replacement content
|-
| align="center" | [[#<replaces>|<code>'''<replaceAll>'''</code>]]
| align="center" | <code>'''true'''</code>
| Specifies whether all regex matches should be replaced or only the first one
|-
| align="center" | [[#<replaces>|<code>'''<failIfNotFound>'''</code>]]
| align="center" | <code>'''true'''</code>
| Specifies whether execution should fail if regex didn't match any content to replace
|-
| align="center" | [[#<replaces>|<code>'''<groovy>'''</code>]]
| align="center" | <code>'''false'''</code>
| Specifies whether <code>'''{{ .. }}'''</code> sections should be Groovy-evaluated in <code>'''<to>'''</code>
|}


== <dependency> ==

* [http://evgeny-goldin.org/groovydoc/maven-plugins/0.2.3.5/com/goldin/plugins/copy/CopyDependency.html <code>'''com.goldin.plugins.copy.CopyDependency'''</code>]:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable" style="width:100%"
|-
! style="width:15%" | Name
! style="width:10%" | Default value
! style="width:75%" | Description
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<groupId>'''</code>]]
| align="center" |
| Dependency <code>'''<groupId>'''</code>
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<artifactId>'''</code>]]
| align="center" |
| Dependency <code>'''<artifactId>'''</code>
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<version>'''</code>]]
| align="center" |
| Dependency <code>'''<version>'''</code>
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<type>'''</code>]]
| align="center" |
| Dependency <code>'''<type>'''</code>
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<classifier>'''</code>]]
| align="center" |
| Dependency <code>'''<classifier>'''</code>
|-
| align="center" | [[#Explicit <dependencies>|<code>'''<optional>'''</code>]]
| align="center" | <code>'''false'''</code>
| Marks dependency as "optional": build doesn't fail if it fails to be resolved
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeTransitive>'''</code>]]
| align="center" | <code>'''false'''</code>
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: specifies whether or not they should be resolved transitively
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<includeScope>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: scope of dependencies to include
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeScope>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: scope of dependencies to exclude
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<includeGroupIds>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<groupId>'''</code>s of dependencies to include
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeGroupIds>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<groupId>'''</code>s of dependencies to exclude
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<includeArtifactIds>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<artifactId>'''</code>s of dependencies to include
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeArtifactIds>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<artifactId>'''</code>s of dependencies to exclude
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<includeClassifiers>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<classifier>'''</code>s of dependencies to include
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeClassifiers>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<classifier>'''</code>s of dependencies to exclude
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<includeTypes>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<type>'''</code>s of dependencies to include
|-
| align="center" | [[#"Filtering" <dependencies>|<code>'''<excludeTypes>'''</code>]]
| align="center" |
| When dependencies are [[#"Filtering" <dependencies>|filtered]]: comma-separated <code>'''<type>'''</code>s of dependencies to exclude
|}


== <groovyConfig> ==

* [http://evgeny-goldin.org/groovydoc/gcommons/0.5.3.4/com/goldin/gcommons/util/GroovyConfig.html <code>'''com.goldin.gcommons.util.GroovyConfig'''</code>]:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable" style="width:100%"
|-
! style="width:15%" | Name
! style="width:10%" | Default value
! style="width:75%" | Description
|-
| align="center" | [[#<groovyConfig>|<code>'''<verbose>'''</code>]]
| align="center" | <code>'''true'''</code>
| Whether Groovy evaluations are verbose and return results are logged
|-
| align="center" | [[#<groovyConfig>|<code>'''<verboseBinding>'''</code>]]
| align="center" | <code>'''false'''</code>
| Whether Groovy evaluations are verbose and all variables [[#Maven properties as Groovy variables|bound]] to the scope are logged
|-
| align="center" | [[#Supporting Groovy classes with <classpath>|<code>'''<classpath> / <classpaths>'''</code>]]
| align="center" |
| Additional classpath locations to use when running Groovy code
|}


= <description> =

Every <code>'''<resource>'''</code> may have a textual description specified. It is helpful to make it standing out in logs as they may be quite verbose at times.


* When specified, its value is logged before and after <code>'''<resource>'''</code> is processed.
* In addition, <code>'''<resource>'''</code> execution time is also logged in milliseconds.
* If <code>'''<description>'''</code> starts with <code>'''"{{"'''</code> and ends with <code>'''"}}"'''</code> then it is evaluated as [[#Groovy "extension points"|Groovy expression]] for each log message.


<syntaxhighlight lang="xml">
<resource>
    <description>Testing "latest" filter</description>
    ...
</resource>

<resource>
    <description>{{ '"3 == 3" test: [' + new Date() +']' }}</description>
    ...
</resource>
</syntaxhighlight>


Later:


<syntaxhighlight lang="text">
[INFO] ==> Processing <resource> [Testing "latest" filter]
...
[INFO] ==> <resource> [Testing "latest" filter] processed, [448] ms

[INFO] ==> Processing <resource> ["3 == 3" test: [Sat Feb 26 04:08:56 PST 2011]]
...
[INFO] ==> <resource> ["3 == 3" test: [Sat Feb 26 04:08:57 PST 2011]] processed, [48] ms
</syntaxhighlight>


= Copying =

== Copying directories and files: <directory> + <includes> - <excludes> = <targetPath> ==

Copying is the most common operation:

<syntaxhighlight lang="xml">

<!-- Specifying single <targetPath>, <include> and <exclude> -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
    <include>src/main/scripts/**, src/test/scripts/**</include>
    <exclude>**/*.pl</exclude>
</resource>

<!-- Specifying multiple <targetPaths>, <includes> and <excludes> -->
<resource>
    <targetPaths>
        <targetPath>${project.build.outputDirectory}/scripts</targetPath>
        <targetPath>${project.build.directory}/scripts</targetPath>
    </targetPaths>
    <directory>${project.basedir}</directory>
    <includes>
        <include>src/main/resources/**</include>
        <include>src/main/scripts/**</include>
    </includes>
    <excludes>
        <exclude>**/*.sh</exclude>
        <exclude>**/*.pl</exclude>
    </excludes>
</resource>
</syntaxhighlight>


* This is the most common form of copying files: files matched by <code>'''<directory>'''</code> + <code>'''<includes>'''</code> - <code>'''<excludes>'''</code> patterns are copied to a single <code>'''<targetPath>'''</code> or multiply <code>'''<targetPaths>'''</code>.
* Comma-separated <code>'''<includes>'''</code> and <code>'''<excludes>'''</code> patterns are the same as for [http://maven.apache.org/plugins/maven-resources-plugin/examples/include-exclude.html <code>'''"maven-resources-plugin"'''</code>]. Pattern matching is '''case-sensitive'''!
* See [[#<defaultExcludes>|<code>'''<defaultExcludes>'''</code>]] below for the list of files that are always excluded and an option to control or disable it.
* Empty directories are not copied!
* Unlike <code>'''"maven-resources-plugin"'''</code>, <code>'''"maven-copy-plugin"'''</code> '''<u>fails</u>''' if <code>'''<directory>'''</code> + <code>'''<includes>'''</code> - <code>'''<excludes>'''</code> combination matches no files. This is a deliberate design decision to make sure that everything is going the way it is supposed to. If there were no failures you can be 100% sure that no files were missing and each and every step has executed successfully. This behavior can be overridden with [[#<failIfNotFound>|<code>'''<failIfNotFound>'''</code>]] boolean flag.


=== Copying files to locations specified externally - <targetRoots> ===

It is easy to work with the plugin if all target locations are known to you in advance. But what happens if archive created should be copied to various locations specified by external parameter? <code>'''<targetRoots>'''</code> takes a comma-separated list of locations and prepends each of them to every <code>'''<targetPath>'''</code>:

<syntaxhighlight lang="xml">
<resource>
    <targetRoots>${project.build.outputDirectory}/1, ${project.build.outputDirectory}/2, ${project.build.outputDirectory}/3</targetRoots>
    <targetPath>myDir</targetPath>
    <file>${project.basedir}/pom.xml</file>
</resource>
</syntaxhighlight>


This example copies project's <code>'''"pom.xml"'''</code> to 3 locations:
* <code>'''${project.build.outputDirectory}/1/myDir/pom.xml'''</code>
* <code>'''${project.build.outputDirectory}/2/myDir/pom.xml'''</code>
* <code>'''${project.build.outputDirectory}/3/myDir/pom.xml'''</code>


<code>'''<targetRoots>'''</code> doesn't make much sense if it's hardcoded in a POM file as one can use <code>'''<targetPath>'''</code> or <code>'''<targetPaths>'''</code> with identical result. It starts making sense when its value is specified externally to POM, for example, by Jenkins job parameter:


<syntaxhighlight lang="xml">
<resource>
    <targetRoots>${targetRootsParameter}</targetRoots>
    <targetPaths>
        <targetPath>myDir1</targetPath>
        <targetPath>myDir2</targetPath>
    </targetPaths>
    <file>${project.basedir}/pom.xml</file>
</resource>
</syntaxhighlight>


If Jenkins user specifies <code>'''${targetRootsParameter}'''</code> to be <code>'''"directory1, directory2, directory3"'''</code>, whatever they are, each directory will have <code>'''"myDir1/pom.xml"'''</code> and <code>'''"myDir2/pom.xml"'''</code> created in it. Number of copy operations is therefore equal to "Number of locations in <code>'''<targetRoots>'''</code>" '''*''' "Number of <code>'''<targetPaths>'''</code>".


=== Moving files with <move> ===

Normally, files are copied from <code>'''<directory>'''</code> to <code>'''<targetPath>'''</code>. If you need to move them, specify <code>'''<move>true</move>'''</code>:


<syntaxhighlight lang="xml">
<resource>
    <targetPath> .. </targetPath>
    <directory> .. </directory>
    <move>true</move>
</resource>
<resource>
    <targetPath>file.zip</targetPath>
    <directory> .. </directory>
    <pack>true</pack>
    <move>true</move>
</resource>
</syntaxhighlight>


<code>'''<move>'''</code> can be combined with [[#Packing archives: <pack>|packing archives]], [[#<filtering>|filtering]] files and [[#<replaces>|replacing]] content. With <code>'''<move>'''</code> source files are deleted after operation required is executed so you don't need to explicitly use [[#<clean>|<clean>]].


=== Keeping relative paths when copying: <preservePath> ===

In order to preserve directory's structure when its files are copied, you need to use <code>'''<preservePath>'''</code> tag:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
    <includes>
        <include>src/main/resources/**</include>
        <include>src/main/scripts/**</include>
    </includes>
    <preservePath>true</preservePath> <!-- "false" by default -->
</resource>
</syntaxhighlight>

Otherwise, all files matched will be copied to the same <code>'''<targetPath>'''</code>, regardless of their original location. It is useful when lots of different files from various folders need to be stored in the same folder.


=== Copying "shortcuts" ===

Shorter forms are available for common cases:

<syntaxhighlight lang="xml">
<!-- Copies all "directory" files to the same "targetPath" -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
</resource>

<!-- Copies all "directory" files to "targetPath" preserving their original paths -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
    <preservePath>true</preservePath>
</resource>

<!-- Copies a single file -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <file>${project.basedir}/some/file.txt</file>
</resource>

<!-- Copies a single files, modifies its target name -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <file>${project.basedir}/some/oldName.txt</file>
    <destFileName>newName.txt</destFileName>
</resource>

<!-- Uses a single "include" -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
    <include>**/*.xml</include>
</resource>

<!-- Uses a single "exclude" -->
<resource>
    <targetPath>${project.build.outputDirectory}/scripts</targetPath>
    <directory>${project.basedir}</directory>
    <exclude>**/*.sh</exclude>
</resource>
</syntaxhighlight>

* Single file can be copied by using <code>'''<file>'''</code> instead of <code>'''<directory>'''</code> and <code>'''<include>'''</code>.
* File's destination name can be changed with <code>'''<destFileName>'''</code>.


== Filtering and replacing text files ==


=== <filtering> ===

When text or XML files are copied sometimes there's a need to modify their content. This operation is known as [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html "filtering"] (''[http://maven.apache.org/guides/getting-started/index.html#How_do_I_filter_resource_files "How do I filter resource files?"]'') in Maven where all <code>'''${property}'''</code> appearances are replaced with their corresponding values, built-in like <code>'''${project.groupId}'''</code> or those defined in POM <code>'''<properties>'''</code>. Filtering is enabled identically to <code>'''[http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html "maven-resources-plugin"]'''</code> and optional <code>'''<encoding>'''</code> allows to specify the encoding, <code>''''UTF-8''''</code> by default:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/config</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.xml</include>
    <filtering>true</filtering>
    <encoding>ASCII</encoding>
</resource>
</syntaxhighlight>


If you copy various files filtering some of them and would like to stop certain file extensions from being filtering use <code>'''<nonFilteredExtensions>'''</code>:


<syntaxhighlight lang="xml">
<configuration>
    <nonFilteredExtensions>pdf, exe, class</nonFilteredExtensions>
    <resources>
        ...
    </resources>
</configuration>
</syntaxhighlight>


Or


<syntaxhighlight lang="xml">
<resource>
    <targetPath> .. </targetPath>
    <directory> .. </directory>
    <filtering>true</filtering>
    <nonFilteredExtensions>pdf, exe, class</nonFilteredExtensions>
</resource>
</syntaxhighlight>


==== Bat files are not filtered - use <filterWithDollarOnly> ====

Many people notice <code>'''"*.bat"'''</code> files are not filtered even though all other files are filtered as expected. This usually happens when <code>'''"*.bat"'''</code> files contain the <code>'''"@echo off"'''</code> statement and <code>'''"@"'''</code> is a [http://maven.apache.org/plugins/maven-resources-plugin/copy-resources-mojo.html#delimiters '''delimiter'''].<br/>In order to use <code>'''${ .. }'''</code>-only expressions for filtering use <code>'''<filterWithDollarOnly>'''</code>:


<syntaxhighlight lang="xml">
<configuration>
    <filterWithDollarOnly>true</filterWithDollarOnly>
    <resources>
        ...
    </resources>
</configuration>
</syntaxhighlight>


Or


<syntaxhighlight lang="xml">
<resource>
    <targetPath> .. </targetPath>
    <file>file.bat</file>
    <filtering>true</filtering>
    <filterWithDollarOnly>true</filterWithDollarOnly>
</resource>
</syntaxhighlight>


=== <replaces> ===

In addition to standard filtering, Regex-based replacement can also be used:

<syntaxhighlight lang="xml">
<!-- Replacing all instances of "set JAVA_HOME=..." to "call $setenv.bat$" in all "*.bat" files -->
<resource>
    <targetPath>${project.build.outputDirectory}/bin</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.bat</include>
    <encoding>ASCII</encoding>
    <replaces>
        <replace>
            <from>set\s+(JAVA_HOME|DOM4J_HOME|JAXB_HOME)\s*=.*</from> <!-- Regex              -->
            <to>call $setenv.bat$</to>                                <!-- Replacement String -->
            <quoteReplacement>true</quoteReplacement>                 <!-- "false" by default -->
            <replaceAll>false</replaceAll>                            <!-- "true" by default -->
            <failIfNotFound>false</failIfNotFound>                    <!-- "true"  by default -->
            <groovy>false</groovy>                                    <!-- "false" by default -->
        </replace>
    </replaces>
</resource>

<!-- Replacing entire content of all *.bat files -->
<resource>
    <targetPath>${project.build.outputDirectory}/bin</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.bat</include>
    <replace>
        <to>echo Batch files are not supported any more!</to>
    </replace>
</resource>

<!-- Replacing with <endOfLine> and <addDollar> -->
<resource>
    <targetPath>${project.build.outputDirectory}/bin</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.bat</include>
    <replace>
        <from> .. </from>
        <to> .. {something} .. {anything}</to>
        <endOfLine>windows</endOfLine>
        <addDollar>something, anything</addDollar>
    </replace>
</resource>
</syntaxhighlight>


* Optional <code>'''<encoding>'''</code> allows to specify filtering encoding, <code>'''"UTF-8"'''</code> by default.
* <code>'''<quoteReplacement>'''</code> is used to [http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String) quote] <code>'''"\"'''</code> and <code>'''"$"'''</code> characters in <code>'''<to>'''</code>. Otherwise, they're [http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html#replaceAll(java.lang.String) treated] like literal characters escaping (<code>'''"\["'''</code>) or captured subsequences references (<code>'''"$1"'''</code>, <code>'''"$2"'''</code>).
* <code>'''<replaceAll>'''</code> specifies whether all regex matches should be replaced or only the first one.
* <code>'''<failIfNotFound>'''</code> allows to ignore cases when Regex pattern wasn't matched in the text. The default behavior is to fail but sometimes this is not required and can be turned off.
* <code>'''<groovy>'''</code> specifies whether <code>'''{{ .. }}'''</code> expressions in <code>'''<to>'''</code> are evaluated as [[#Groovy "extension points"|Groovy expressions]].
* <code>'''<endOfLine>'''</code> specifies end of line to use in result text:
** <code>'''"\r\n"'''</code> if <code>'''<endOfLine>windows</endOfLine>'''</code> is specified
** <code>'''"\n"'''</code> if <code>'''<endOfLine>anyOtherValue</endOfLine>'''</code> is specified
** Original end of line if <code>'''<endOfLine>'''</code> is not specified at all
* <code>'''<addDollar>'''</code> allows to convert <code>'''{..}'''</code> expressions to <code>'''${..}'''</code>:
** <code>'''<addDollar>something, anything</addDollar>'''</code> - <code>'''{something}'''</code> will be converted to <code>'''${something}'''</code> in result, same with <code>'''{anything}'''</code>
** <code>'''<addDollar>true</addDollar>'''</code> - all <code>'''{..}'''</code> expressions will be converted to <code>'''${..}'''</code> in result
** <code>'''<addDollar>false</addDollar>'''</code> - no <code>'''{..}'''</code> expressions will be converted to <code>'''${..}'''</code> in result
** This capability is necessary if you need to generate an <code>'''${expression}'''</code> in result without Maven interpolating it
* When <code>'''<from>'''</code> tag is missing, the entire file content is replaced with <code>'''<to>'''</code>.
* When <code>'''<to>'''</code> tag is missing and <code>'''<addDollar>'''</code> is specified, only <code>'''{..}'''</code> expressions have <code>'''"$"'''</code> added in result.
* <code>'''<to>'''</code> can use Maven properties, they're interpolated by Maven before plugin is executed:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/config</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.xml</include>
    <replaces>
        <from>#timestamp#</from>
        <to>${fileVersion}\nBuilt on [${timestamp-date}] at [${timestamp-time}]\n{{ 'Java version is: ' + System.getProperty( 'java.version' ) }}</to>
        <groovy>true</groovy>
        <endOfLine>linux</endOfLine>
    </replaces>
</resource>
</syntaxhighlight>

... assuming we have <code>'''<properties>'''</code> such as <code>'''${fileVersion}'''</code>, <code>'''${timestamp-date}'''</code> and <code>'''${timestamp-time}'''</code> in our POM ''(the last two were probably set by [http://evgeny-goldin.com/wiki/Maven-timestamp-plugin <code>'''"maven-timestamp-plugin"'''</code>])''. Note the use of <code>'''{{ .. }}'''</code> Groovy expression together with <code>'''<groovy>true</groovy>'''</code>.


== Copying dependencies ==

Files and folders don't provide everything we need. When we think Maven, we usually think <code>'''<dependencies>'''</code>.


=== Explicit <dependencies> ===

You can specify explicit <code>'''<dependencies>'''</code> or a single <code>'''<dependency>'''</code> to copy:

<syntaxhighlight lang="xml">
<!-- Specifying multiple <dependencies> with <groupId>:<artifactId>:<version> -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependencies>
        <dependency>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.7</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>commons-httpclient</groupId>
            <artifactId>commons-httpclient</artifactId>
            <version>3.1</version>
        </dependency>
    </dependencies>
</resource>

<!-- Specifying single <dependency> with <groupId>:<artifactId>:<version>:<type>:<classifier> -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <groupId> .. </groupId>
        <artifactId> .. </artifactId>
        <version> .. </version>
        <type> .. </type>
        <classifier> .. </classifier>
    </dependency>
</resource>

<!-- Using <optional> and <stripVersion> -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <groupId>commons-httpclient</groupId>
        <artifactId>commons-httpclient</artifactId>
        <version>3.1</version>
        <optional>true</optional>     <!-- "false" by default -->
    </dependency>
    <stripVersion>true</stripVersion> <!-- "false" by default -->
</resource>
</syntaxhighlight>


* <code>'''<optional>'''</code> allows to mark a <code>'''<dependency>'''</code> as optional so the build won't fail if it fails to be resolved.
* <code>'''<stripVersion>'''</code> allows to remove the versioning part from file names when they're copied.


=== "Filtering" <dependencies> ===

Any <code>'''<dependency>'''</code> lacking <code>'''<groupId>'''</code> or <code>'''<artifactId>'''</code> is considered to be a "filtering <code>'''<dependency>'''</code>", that is it is a <code>'''<dependency>'''</code> referencing other dependencies, like ''"All compile dependencies"''. Combinations of following elements may be used in a "filtering <code>'''<dependency>'''</code>", all together they will be <code>'''"AND"'''</code>-ed to create a filtering condition:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable"
|-
! Name
! Description
! Example
|-
| <code>'''<excludeTransitive>'''</code>
| align="center" | Whether dependencies shouldn't be included transitively, <code>'''false'''</code> by default.
| <code>'''<excludeTransitive>true</excludeTransitive>'''</code>
|-
| <code>'''<includeScope>'''</code>
| align="center" | Scope of dependencies to include
| <code>'''<includeScope>compile</includeScope>'''</code>
|-
| <code>'''<excludeScope>'''</code>
| align="center" | Scope of dependencies to exclude
| <code>'''<excludeScope>compile</excludeScope>'''</code>
|-
| <code>'''<includeGroupIds>'''</code>
| align="center" | Set of groupIds to include, comma-separated.
| <code>'''<includeGroupIds>org.jvnet.hudson.main,org.jvnet.hudson.plugins</includeGroupIds>'''</code>
|-
| <code>'''<excludeGroupIds>'''</code>
| align="center" | Set of groupIds to exclude, comma-separated.
| <code>'''<excludeGroupIds>org.jvnet.hudson.plugins</excludeGroupIds>'''</code>
|-
| <code>'''<includeArtifactIds>'''</code>
| align="center" | Set of artifactIds to include, comma-separated.
| <code>'''<includeArtifactIds>greenballs</includeArtifactIds>'''</code>
|-
| <code>'''<excludeArtifactIds>'''</code>
| align="center" | Set of artifactIds to exclude, comma-separated.
| <code>'''<excludeArtifactIds>greenballs</excludeArtifactIds>'''</code>
|-
| <code>'''<includeClassifiers>'''</code>
| align="center" | Set of classifiers to include, comma-separated.
| <code>'''<includeClassifiers>windows</includeClassifiers>'''</code>
|-
| <code>'''<excludeClassifiers>'''</code>
| align="center" | Set of classifiers to exclude, comma-separated.
| <code>'''<excludeClassifiers>jdk14</excludeClassifiers>'''</code>
|-
| <code>'''<includeTypes>'''</code>
| align="center" | Set of types to include, comma-separated.
| <code>'''<includeTypes>zip,tar.gz</includeTypes>'''</code>
|-
| <code>'''<excludeTypes>'''</code>
| align="center" | Set of types to exclude, comma-separated.
| <code>'''<excludeTypes>jar</excludeTypes>'''</code>
|}


<syntaxhighlight lang="xml">
<!-- Copying all "compile" <dependencies> transitively -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
    </dependency>
</resource>

<!-- Copying all "compile" <dependencies> non-transitively -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
        <excludeTransitive>true</excludeTransitive>
    </dependency>
</resource>

<!-- Copying all "test" <dependencies> but excluding "runtime" scope -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <includeScope>test</includeScope>
        <excludeScope>runtime</excludeScope>
    </dependency>
</resource>

<!-- Copying "compile" <dependencies> but only "com.company" groupIds -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
        <includeGroupIds>com.company</includeGroupIds>
    </dependency>
</resource>

<!-- Copying all "compile" <dependencies> but excluding "com.company" groupIds -->
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
        <excludeGroupIds>com.company</excludeGroupIds>
    </dependency>
</resource>
</syntaxhighlight>


=== Mixing both kinds ===

Both kinds of <code>'''<dependencies>'''</code> can be mixed together in the same <code>'''<resource>'''</code>:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/lib</targetPath>
    <dependencies>
        <dependency>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.7</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <includeScope>compile</includeScope>
            <excludeTransitive>true</excludeTransitive>
        </dependency>
    </dependencies>
</resource>
</syntaxhighlight>


= Archiving =


== Packing archives: <pack> ==

Most of the time we use build tools such as Maven to create an archive. It is done using <code>'''<pack>'''</code>:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    ...
</resource>
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    ...
</resource>
<resource>
    <targetPath>${project.build.directory}/finalName.zip</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <pack>true</pack>
</resource>
</syntaxhighlight>

This is the most repeating pattern in most builds: copy N resources and pack the resulting archive. Note that you need to specify archive name in <code>'''<targetPath>'''</code> in addition to <code>'''<pack>true</pack>'''</code>, this will specify archive's format.

Currently supported formats are listed in [http://github.com/evgeny-goldin/gcommons/blob/master/src/main/resources/META-INF/services/de.schlichtherle.io.registry.properties this file] and include <code>'''jar'''</code>, <code>'''war'''</code>, <code>'''ear'''</code>, <code>'''zip'''</code>, <code>'''hpi'''</code>, <code>'''tar'''</code>, <code>'''tgz'''</code>, <code>'''tar.gz'''</code>.


=== Controlling file location with <destFileName> ===

When packing a '''''single file''''' into an archive you can specify its location there:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>pom.zip</targetPath>
    <file>${project.basedir}/pom.xml</file>
    <pack>true</pack>
    <destFileName>a/b/c/pom.txt</destFileName>
</resource>
</syntaxhighlight>


This example copies project's <code>'''"pom.xml"'''</code> to <code>'''"pom.zip"'''</code> but not as <code>'''"pom.zip/pom.xml"'''</code> as it would normally happen. The file will be located at <code>'''"pom.zip/a/b/c/pom.txt"'''</code>. Note that using <code>'''<destFileName>'''</code> together with <code>'''<pack>'''</code> works for single files only, the execution will fail if more than one file is packed.


=== Controlling file prefix with <prefix> ===

It is possible to specify files prefix when they are packed into an archive:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>archive.zip</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <pack>true</pack>
    <prefix>resources</prefix>
</resource>
</syntaxhighlight>


This example packs all files under <code>'''"${project.basedir}/src/main/resources"'''</code> to <code>'''"archive.zip/resources"'''</code> and not to archive's root as it would normally happen. You would achieve the same result with:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>archive.zip</targetPath>
    <directory>${project.basedir}/src/main</directory>
    <include>resources</include>
    <pack>true</pack>
</resource>
</syntaxhighlight>


But <code>'''<prefix>'''</code> allows you to disregard original folder source files were located at:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>archive.zip</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <pack>true</pack>
    <prefix>springResources</prefix>
</resource>
</syntaxhighlight>


=== Updating existing archives ===

It is possible to update an existing ZIP-based archive, such as <code>'''"*.jar"'''</code>, <code>'''"*.war"'''</code> or <code>'''"*.hpi"'''</code>:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.directory}/name.jar</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <include>**/*.xml, **/*.txt</include>
    <pack>true</pack>
    <update>true</update>
</resource>
<resource>
    <targetPath>${project.build.directory}/name.zip</targetPath>
    <file>${project.build.outputDirectory}/someFile.xml</file>
    <pack>true</pack>
    <update>true</update>
</resource>
</syntaxhighlight>


* Updating doesn't work for <code>'''"*.tar"'''</code>, <code>'''"*.tgz"'''</code>, and <code>'''"*.tar.gz"'''</code> archives.
* You have to [[#Choosing between TrueZip and Ant|use Ant]] to update a ZIP-based archive which is the default option that you shouldn't modify.


=== Attaching archives as Maven artifact: <attachArtifact> ===

<code>'''<attachArtifact>'''</code> allows to mark an archive created as '''"Maven's artifact"'''. This will deploy it to remote repository when <code>'''"mvn deploy"'''</code> is run. It works the same if you use Artifactory [http://wiki.jfrog.org/confluence/display/RTF/Build+Integration integration] with CI servers to deploy artifacts.

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.directory}/finalName.zip</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <pack>true</pack>
    <attachArtifact>true</attachArtifact> <!-- "false" by default -->
</resource>
</syntaxhighlight>


* Using <code>'''<attachArtifact>'''</code> doesn't make the plugin to deploy anything, it merely "marks" archives created as "Maven artifacts". The deployment is later done by Maven ''if'' <code>'''"mvn deploy"'''</code> is run.
* See [[#Deploying artifacts: <deploy>|<code>'''<deploy>'''</code>] for explicit invocation of deploy operation.


==== Maven coordinates: <artifactClassifier> ====

* Full [http://maven.apache.org/pom.html#Maven_Coordinates coordinates] of each Maven artifacts are expressed as <code>'''<groupId>:<artifactId>:<packaging>:<classifier>:<version>'''</code>.
* <code>'''<groupId>:<artifactId>:<version>'''</code> coordinates of the artifact attached are those of the POM where plugin is running.
* Its <code>'''<packaging>'''</code> (<code>'''<type>'''</code>) is set by the packaging type: <code>'''"zip"'''</code>, <code>'''"gz"'''</code> or <code>'''"tar"'''</code>, taken from the archive file extension
* When more than one archive created in the same POM there's a need to differentiate between them with a <code>'''<classifier>'''</code>.

Latter can be done by an optional <code>'''<artifactClassifier>'''</code> tag:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.directory}/firstArchive.zip</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <include>**/*.xml</include>
    <pack>true</pack>
    <attachArtifact>true</attachArtifact>
    <artifactClassifier>firstArchive</artifactClassifier>
</resource>
<resource>
    <targetPath>${project.build.directory}/secondArchive.zip</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <exclude>**/*.dll</exclude>
    <pack>true</pack>
    <attachArtifact>true</attachArtifact>
    <artifactClassifier>secondArchive</artifactClassifier>
</resource>
</syntaxhighlight>

Later, both archives can be pulled and used as follows:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    <dependencies>
        <dependency>
            <groupId> ... </groupId>
            <artifactId> ... </artifactId>
            <version> ... </version>
            <type>zip</type>
            <classifier>firstArchive</classifier>
        </dependency>
        <dependency>
            <groupId> ... </groupId>
            <artifactId> ... </artifactId>
            <version> ... </version>
            <type>zip</type>
            <classifier>secondArchive</classifier>
        </dependency>
    </dependencies>
    <unpack>true</unpack>
</resource>
</syntaxhighlight>


=== Deploying artifacts: <deploy> ===

<code>'''<attachArtifact>'''</code> merely marks an archive created as Maven artifact, it will be deployed according to POM coordinates only when <code>'''"mvn deploy"'''</code> is run. It is possible to deploy archives created directly to repository and coordinates specified with <code>'''<deploy>'''</code>:


<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.directory}/file.zip</targetPath>
    <directory> ... </directory>
    <pack>true</pack>
    <deploy>deployUrl|groupId|artifactId|version[|classifier]</deploy>
</resource>
<resource>
    <targetPath>${project.build.directory}/file.zip</targetPath>
    <directory> ... </directory>
    <pack>true</pack>
    <deploy>http://evgeny-goldin.org/artifactory/libs-releases-local|com.goldin|test|3</deploy>
</resource>
<resource>
    <targetPath>${project.build.directory}/file.zip</targetPath>
    <directory> ... </directory>
    <pack>true</pack>
    <deploy>http://evgeny-goldin.org/artifactory/libs-releases-local|com.goldin|test|3|win</deploy>
</resource>
</syntaxhighlight>


* Similarly to <code>'''<attachArtifact>'''</code>, artifact's <code>'''<packaging>'''</code> (<code>'''<type>'''</code>) is determined automatically according to file extension.<br/>It is <code>'''"tar.gz"'''</code> and <code>'''"tar.bz2"'''</code> for corresponding archives.
* Currently, <code>'''<deploy>'''</code> [http://evgeny-goldin.org/youtrack/issue/pl-258 only works for Maven 2] due to internal changes in Maven 3.


== Unpacking archives: <unpack> ==

Unpacking can be used very similarly using <code>'''<unpack>'''</code> tag:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    <file>/some/file.zip</file>
    <unpack>true</unpack>
</resource>
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    <directory>${project.basedir}/some/dir</directory>
    <include>**/*.zip</include>
    <unpack>true</unpack>
</resource>
<resource>
    <targetPath>${project.build.directory}/product.zip</targetPath>
    <directory>${project.build.outputDirectory}</directory>
    <pack>true</pack>
</resource>
</syntaxhighlight>

Currently supported formats are the same as for [[#Packing archives: <pack>|<code>'''<pack>'''</code>]] operation.


== Packing and unpacking <dependencies> ==

As with copying, you can <code>'''<pack>'''</code> and <code>'''<unpack>'''</code> <code>'''<dependencies>'''</code> as well:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/allDeps.tar.gz</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
    </dependency>
    <pack>true</pack>
</resource>
<resource>
    <targetPath>${project.build.outputDirectory}/allDepsUnpacked</targetPath>
    <dependency>
        <includeScope>compile</includeScope>
    </dependency>
    <unpack>true</unpack>
</resource>
<resource>
    <targetPath>${project.build.outputDirectory}/allDepsUnpacked</targetPath>
    <dependencies>
        <dependency>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.gmaven.runtime</groupId>
            <artifactId>gmaven-runtime-1.7</artifactId>
            <version>1.2</version>
        </dependency>
        <dependency>
            <includeScope>compile</includeScope>
            <excludeTransitive>true</excludeTransitive>
        </dependency>
    </dependencies>
    <unpack>true</unpack>
</resource>
</syntaxhighlight>


== Unpacking <zipEntries> ==

Occasionally, all you need to unpack is a number of ZIP entries and not the whole archive. This can speed up the process tremendously and is achieved with <code>'''<zipEntries>'''</code> or a single <code>'''<zipEntry>'''</code>:


<syntaxhighlight lang="xml">
<!-- Multiple Zip entries -->
<resource>
    <targetPath>${outputDir}</targetPath>
    <file>${resourcesDir}/apache-maven-3.0.1.zip</file>
    <zipEntries>
        <zipEntry>apache-maven-3.0.1/lib/maven-core-3.0.1.jar</zipEntry>
        <zipEntry>apache-maven-3.0.1/LICENSE.txt</zipEntry>
        <zipEntry>apache-maven-3.0.1/bin/mvnDebug.bat</zipEntry>
        <zipEntry>apache-maven-3.0.1/lib/maven-compat-3.0.1.jar</zipEntry>
    </zipEntries>
    <unpack>true</unpack>
</resource>
<!-- Single Zip entry -->
<resource>
    <targetPath>${outputDir}</targetPath>
    <file>${resourcesDir}/apache-maven-3.0.1.zip</file>
    <zipEntry>apache-maven-3.0.1/bin/mvnDebug.bat</zipEntry>
    <unpack>true</unpack>
</resource>
<!-- Single Zip entry with a pattern -->
<resource>
    <targetPath>${outputDir}</targetPath>
    <file>${resourcesDir}/apache-maven-3.0.1.zip</file>
    <zipEntry>**/*.jar</zipEntry>
    <preservePath>true</preservePath>
    <unpack>true</unpack>
</resource>
</syntaxhighlight>


* When <code>'''<preservePath>'''</code> is <code>'''false'''</code> ''(default value)'' then all archive content matched by <code>'''<zipEntry>'''</code> is copied to <code>'''"<targetPath>"'''</code> regardless of original Zip path.
* When <code>'''<preservePath>'''</code> is <code>'''true'''</code> then all archive content matched by <code>'''<zipEntry>'''</code> is copied to <code>'''"<targetPath>/original/zip/path"'''</code>.


== Choosing between TrueZip and Ant ==

It is possible to choose either [http://truezip.java.net/ TrueZip] or [http://ant.apache.org/ Ant] libraries for pack and unpack operations:


<syntaxhighlight lang="xml">
<configuration>
    <!-- Default value -->
    <useTrueZipForPack>false</useTrueZipForPack>
    <!-- Default value -->
    <useTrueZipForUnpack>true</useTrueZipForUnpack>
    <resources>
        ...
    </resources>
</configuration>
</syntaxhighlight>


Or


<syntaxhighlight lang="xml">
<resource>
    <!-- Default value -->
    <useTrueZipForPack>false</useTrueZipForPack>
    ...
    <pack>true</pack>
</resource>
<resource>
    <!-- Default value -->
    <useTrueZipForUnpack>true</useTrueZipForUnpack>
    ...
    <unpack>true</unpack>
</resource>
</syntaxhighlight>


By default, Ant is used when archives are packed and TrueZip is used when archives are unpacked as it demonstrated a better performance with large archives.


= Networking Support =

Sometime, files are not available locally so networking support is provided. Those [http://github.com/evgeny-goldin/maven-plugins-test/blob/c3f9092c6702266868b883b50df8a676359e617e/maven-copy-plugin/issues/0.2.1/pom.xml#L63 two] [http://github.com/evgeny-goldin/maven-plugins-test/blob/3176dc272a154dbf7dd9026736950c5d416dada8/maven-copy-plugin/net-scenario/pom.xml#L37 tests] provide examples of HTTP, SCP, FTP download and SCP, FTP upload. HTTP upload capability is [http://evgeny-goldin.org/youtrack/issue/pl-312 planned] to be implemented later.


== Downloading files: HTTP, SCP, FTP ==

<syntaxhighlight lang="xml">
<resource>
    <targetPath>...</targetPath>
    <directory>\\server\directory</directory>
</resource>
<resource>
    <targetPath>...</targetPath>
    <file>http://server/file.zip</file>
    <unpack>true</unpack>
</resource>
<resource>
    <targetPath>...</targetPath>
    <file>scp://user:password@server:/path/to/file.zip</file>
    <unpack>true</unpack>
</resource>
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@server:/path</directory>
    <include>file.zip</include>
    <unpack>true</unpack>
</resource>
</syntaxhighlight>


=== Downloading files - advanced FTP ===

This plugin provides a special support for downloading FTP files:

<syntaxhighlight lang="xml">
<!-- Downloading files with <include> / <exclude> patterns -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>*.zip, *.jar, *.xml</include>
    <exclude>*-2010-*.zip</exclude>
</resource>

<!-- Downloading files with <include> / <exclude> patterns specified in external file -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>file:path/to/includePatterns.txt</include>
</resource>

<!-- Downloading files with <include> / <exclude> patterns specified in a file available in a classpath -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
</resource>

<!-- Downloading files specifying download attempts and timeout (in seconds) -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <retries>10</retries>   <!-- Default is "5" -->
    <timeout>1800</timeout> <!-- Default is "3600" -->
</resource>
</syntaxhighlight>


=== Downloading files - FTP with "wget" and <listFilter> ===

Some FTP servers are too slow and trying to download files can timeout. In this case it is possible to get a list of files to download and retrieve them with <code>'''"wget"'''</code>:

<syntaxhighlight lang="xml">
<!-- Downloading files specifying "wget" for listing files -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <!-- Command to run "wget" -->
    <wget>wget</wget>
</resource>

<!-- Downloading files specifying listing file name -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <wget>wget.exe|ftp-list.txt</wget> <!-- Default listing file name is "ftp-list.txt" in user's current directory -->
</resource>

<!-- Downloading files specifying whether or not listing file should be deleted upon completion -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <wget>wget.exe|ftp-list.txt|false</wget> <!-- By default, listing file is deleted -->
</resource>

<!-- Downloading files specifying whether or not native FTP listing should be applied -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <wget>wget.exe|ftp-list.txt|false|true</wget> <!-- By default, Ant task is used to list the files -->
</resource>

<!-- Downloading files specifying "list filter" to filter files that end with "2011.zip" -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <wget>wget.exe</wget>
    <listFilter>
    {{
        files.keySet().findAll{ it.endsWith( '2011.zip' ) }
    }}
    </listFilter>
</resource>

<!-- Downloading files specifying "list filter" to filter files that are larger than 500 bytes -->
<resource>
    <targetPath>...</targetPath>
    <directory>ftp://user:password@host:/path</directory>
    <include>classpath:includePatterns.txt</include>
    <wget>wget.exe</wget>
    <listFilter>
    {{
        files.keySet().findAll{ files[ it ] > 500 }
    }}
    </listFilter>
</resource>
</syntaxhighlight>


* <code>'''wget'''</code> for Windows platform can be downloaded from http://gnuwin32.sourceforge.net/packages/wget.htm.
* "Native FTP listing" means include patterns will be passed as glob patterns to FTP server, i.e., the listing process will happen on the server side ''(by default, Ant task is used to list the files which can be significantly slower)''.<br/>When "Native FTP listing" is applied, exclude patterns can still be used, they will be applied on files listed by FTP server.
* Similarly to [[#Filtering files: <filter>|<code>'''<filter>'''</code>]], <code>'''<listFilter>'''</code> Groovy snippet has <code>'''"files"'''</code> variables passed to it which is a <code>'''Map<String, Long>'''</code> of file FTP URLs to their size. Sample key is <code>'''"ftp://host.com/path/file.xml.zip"'''</code>, sample value is <code>'''23505456'''</code>. Return value from evaluating Groovy expression is expected to be either <code>'''Collection<String>'''</code> or <code>'''String'''</code> - URL(s) of files to download.
* <code>'''<listFilter>'''</code> is only active when <code>'''<wget>..</wget>'''</code> is specified. Otherwise, no listing file is created and there's nothing to filter.


== Uploading files: SCP, FTP ==

<syntaxhighlight lang="xml">
<resource>
    <targetPath>\\server\directory</targetPath>
    <directory>...</directory>
</resource>
<resource>
    <targetPath>scp://user:password@server:/path/to/dir</targetPath>
    <file>...</file>
</resource>
<resource>
    <targetPath>scp://user:password@server:/path/to/dir</targetPath>
    <directory>...</directory>
    <include>...</include>
    <exclude>...</exclude>
</resource>
<resource>
    <targetPath>ftp://user:password@server:/path/to/dir</targetPath>
    <directory>...</directory>
    <include>...</include>
    <exclude>...</exclude>
</resource>
</syntaxhighlight>


= Additional Operations =

Most of the time being able to copy, pack, unpack, download and upload files is enough.
Sometimes, additional operations are required.


== <clean> ==

<syntaxhighlight lang="xml">
<!-- Clean up matching files only -->
<resource>
    <directory>...</directory>
    <includes>...</includes>
    <excludes>...</excludes>
    <clean>true</clean>
</resource>

<!-- Clean up matching files and any empty directories that are left -->
<resource>
    <directory>...</directory>
    <includes>...</includes>
    <excludes>...</excludes>
    <clean>true</clean>
    <cleanEmptyDirectories>true</cleanEmptyDirectories>
</resource>
</syntaxhighlight>

* Instead of copying ''from'', <code>'''<clean>'''</code> deletes all files matched by a usual <code>'''<directory>'''</code> + <code>'''<includes>'''</code> - <code>'''<excludes>'''</code> combination.
* Optional <code>'''<cleanEmptyDirectories>'''</code> allows to clean any empty directories that resulted from cleaning files, <code>'''false'''</code> by default.
* If you need to move files, consider using [[#Moving files with <move>|<code>'''<move>'''</code>]] operation instead.


== <mkdir> ==

<syntaxhighlight lang="xml">
<resource>
    <targetPath>...</targetPath>
    <mkdir>true</mkdir>
</resource>
</syntaxhighlight>

Instead of copying ''to'', <code>'''<mkdir>'''</code> creates directory specified by the <code>'''<targetPath>'''</code>. Remember that empty directories are not copied so feel it with data before attempting to copy it somewhere.


= Groovy "extension points" =

I believe in extendable software. Software that can be used beyond its original capabilities. Within time I've witnessed how [http://search.cpan.org/ Perl modules], [http://addons.mozilla.org/ Firefox extensions] and [http://plugins.intellij.net/?idea IDEA plugins] provided ways for people to implement their own custom needs. Those that couldn't be met originally since it is simply not realistically to meet everybody's needs in one single piece of software, be it a product or a language library.

So extension points or [http://plugins.intellij.net/ plugins] is the real "must" for any platform, technology or a product and <code>'''"maven-copy-plugin"'''</code> is not exception to this rule, of course.

Some tags support <code>'''<nowiki>{{ ... }}</nowiki>'''</code> sections for Groovy code snippets which are executed and results returned are used according to the situation in place.


== Maven properties as Groovy variables ==

All Maven <code>'''<properties>'''</code> that are explicitly set in POM are available as Groovy variables in the scope of <code>'''<nowiki>{{ ... }}</nowiki>'''</code> snippet.


<syntaxhighlight lang="xml">
<properties>
    <dogName>Rony</dogName>
</properties>
</syntaxhighlight>


allows to use it like: <code>'''<nowiki>{{ println "My dog's name is $dogName" }}</nowiki>'''</code>

<u>Note the following</u>: if you use it as <code>'''<nowiki>{{ println "My dog's name is ${dogName}" }}</nowiki>'''</code> Maven 2 will interpolate <code>'''${dogName}'''</code> as Maven property long before plugin has started and will replace it with a value known to it or <code>'''"null"'''</code>. If this is not what you want, use either of the following to stop Maven's interpolation from happening:

* <code>'''<nowiki>{{ println "My dog's name is $dogName" }}</nowiki>'''</code>
* <code>'''<nowiki>{{ println "My dog's name is " + dogName }}</nowiki>'''</code>

Maven 3 will also try to interpolate every POM's <code>'''${expression}'''</code> but it will leave unknown expressions untouched so they can still be used in Groovy snippets.


Maven properties with illegal Groovy characters in their names have illegal characters removed and following letter capitalized, similarly to how CSS properties are converted to JavaScript variables. This way, <code>'''${build-url}'''</code> Maven property becomes a <code>'''"buildUrl"'''</code> Groovy variable.

"Built-in" properties like <code>'''${project.groupId}'''</code> and <code>'''${project.build.directory}'''</code> are '''not''' available in Groovy snippet as <code>'''"projectGroupId"'''</code> or <code>'''"projectBuildDirectory"'''</code> since they're not specified explicitly as Maven <code>'''<properties>'''</code>. They are POM elements that can be access as ''if'' they were properties but this is not the same. But you can redefine them again:

<syntaxhighlight lang="xml">
<properties>
    <groupId>${project.groupId}</groupId>
    <dist-dir>${project.build.directory}</dist-dir>
</properties>
</syntaxhighlight>

and then <code>'''"groupId"'''</code> and <code>'''"distDir"'''</code> Groovy variables will be available in the scope of snippet. Or you can use <code>'''"project"'''</code> and <code>'''"session"'''</code> provided variables, as described [[#"project", "session" and "mavenVersion" in Groovy snippet|below]].


=== System properties and environment variables as Groovy variables ===


Both [http://download.oracle.com/javase/6/docs/api/java/lang/System.html#getProperties() system properties] and environment variables are also accessible, as demonstrated in [http://github.com/evgeny-goldin/maven-plugins-test/blob/7a50e0ce6a3db348a0c71f85542d522ed368848d/maven-copy-plugin/copy-mojo/pom.xml#L445 this] test:


<syntaxhighlight lang="text">
/**
 * System Properties
 */
"java.version" : javaVersion
"os.name"      : osName

/**
 * Environment Variables
 */
M2_HOME        : envM2_HOME
JAVA_HOME      : envJAVA_HOME
</syntaxhighlight>


== "project", "session" and "mavenVersion" in Groovy snippet ==


Three additional Groovy variables are available in the scope of snippet:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable"
|-
! Name
! Description
|-
| <code>'''"project"'''</code>
| Plugin's [http://maven.apache.org/ref/2.2.1/maven-project/apidocs/org/apache/maven/project/MavenProject.html <code>'''org.apache.maven.project.MavenProject'''</code>]
|-
| <code>'''"session"'''</code>
| Plugin's [http://maven.apache.org/ref/2.2.1/maven-core/apidocs/org/apache/maven/execution/MavenSession.html <code>'''org.apache.maven.execution.MavenSession'''</code>]
|-
| <code>'''"mavenVersion"'''</code>
| Maven version as appears in <code>'''"META-INF/maven/org.apache.maven/maven-core/pom.properties"'''</code>
|}


One can write:

* <code>'''<nowiki>{{ println project.groupId }}</nowiki>'''</code>
* <code>'''<nowiki>{{ println project.basedir }}</nowiki>'''</code>
* <code>'''<nowiki>{{ println project.properties.propertyName }}</nowiki>'''</code> - if <code>'''"propertyName"'''</code> is set dynamically by [http://evgeny-goldin.com/wiki/Maven-properties-plugin <code>'''"maven-properties-plugin"'''</code>], otherwise you can just use <code>'''<nowiki>{{ println propertyName }}</nowiki>'''</code>
* <code>'''<nowiki>{{ println session.userProperties.propertyName }}</nowiki>'''</code>
* <code>'''<nowiki>{{ println session.startTime }}</nowiki>'''</code>


For other cases, [http://evgeny-goldin.com/wiki/Maven-properties-plugin <code>'''"maven-properties-plugin"'''</code>] provides another way to introduce new Maven properties and, therefore, Groovy variables by evaluating a Groovy snippet.


== Replacing text content ==

Some <code>'''<to>'''</code> [[#<replaces>|replacements]] can't be expressed statically and need to be calculated dynamically. This can be done by adding a <code>'''<groovy>'''</code> tag:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}/config</targetPath>
    <directory>${project.basedir}/src/main/resources</directory>
    <include>*.xml</include>
    <replace>
        <from>#timestamp#</from>
        <to>Built at {{ new Date() }} by {{ buildUrl.contains( '0000' ) ? 'Local build' : buildUrl }}</to>
        <groovy>true</groovy>
    </replace>
</resource>
</syntaxhighlight>

In above scenario there's no need to specify <code>'''<groovy>true</groovy>'''</code> but it is required here since <code>'''<nowiki>{{ ... }}</nowiki>'''</code> section can be part of a usual replacement string, not related to Groovy in any way.


== Filtering files: <filter> ==

Files or dependencies to copy, pack or unpack can be filtered with <code>'''<include/exclude>'''</code>, <code>'''<include/excludeScope>'''</code>, and <code>'''<include/excludeGroupId>'''</code>. But sometimes that is not enough. What if you need to pick up the biggest file? Or the latest one? Or the one having some special token? Since there are endless options for how a set of files can be filtered out before copying, it didn't make sense to add a special tag for all of them.

Instead, <code>'''<filter>'''</code> extension point handles those cases:

<syntaxhighlight lang="xml">
<resource>
    <!-- Only copy files larger than 50Mb -->
    <targetPath>...</targetPath>
    <directory>...</directory>
    <includes>...</includes>
    <filter>{{ files.findAll{ it.size > ( 50 * 1024 * 1024 ) } }}</filter>
</resource>
</syntaxhighlight>

''Before'' files are copied they are passed as <code>'''"files"'''</code> Groovy variable of type <code>'''List<File>'''</code> to the snippet. It is expected to return a <code>'''File'''</code> or <code>'''Collection<File>'''</code> and only those files returned will be copied.

A shortcut is available: <code>'''<filter><nowiki>{{latest}}</nowiki></filter>'''</code> will only copy the latest file and other [http://evgeny-goldin.org/javadoc/ant/Types/selectors.html Ant selectors] are [http://evgeny-goldin.org/youtrack/issue/pl-112 planned] to be supported as well.

When files are [[#Downloading files: HTTP, SCP, FTP|downloaded]] their temp location, where they're downloaded to, is specified in <code>'''"files"'''</code>.

<code>'''<filter>'''</code> works similarly for <code>'''<pack>'''</code>, <code>'''<unpack>'''</code> and <code>'''<clean>'''</code> operations where it filters out files to pack, unpack or delete. It is ignored for <code>'''<mkdir>'''</code> operation.

'''Do not confuse <code><filter></code> with [[#<filtering>|<code><filtering></code>]]!'''
<br/>
<code>'''<filter>'''</code> is used to filter out files ''before'' copying them while <code>'''<filtering>'''</code> is used to enable [[#<filtering>|Maven properties filtering]] ''when'' they're copied. While it sounds similar it serves two absolutely different purposes.


== Post-processing files: <process> ==

After files are copied, pack or unpacked you may want to <code>'''<process>'''</code> them for reporting or <code>'''"chmod"'''</code>-ing:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>...</targetPath>
    <directory>...</directory>
    <includes>
        ...
    </includes>
    <filter>{{  println "Files copied from: $files"; files }}</filter> <!-- We need to return a value from filter! -->
    <process>{{ println "Files copied to:   $files" }}</process>
</resource>
<resource>
    <targetPath>${project.build.directory}/${zipName}.zip</targetPath>
    <directory>${build-dir}</directory>
    <pack>true</pack>
    <process>{{ println "Archive is created at [${ files.first().canonicalPath }] of size [${ files.first().size / ( 1024 * 1024 ) }] Mb" }}</process>
</resource>
<resource>
    <targetPath>${project.build.directory}</targetPath>
    <directory>${build-dir}</directory>
    <include>**/*.sh</include>
    <process>{{ files.each{ "chmod +x '$it'".execute() } }}</process>
</resource>
<resource>
    <targetPath>${project.build.directory}</targetPath>
    <directory>${build-dir}</directory>
    <include>**/*.sh</include>
    <process>{{ ( "chmod +x '" + files.join( ", " ) + "'" ).execute() }}</process>
</resource>
</syntaxhighlight>

''After'' files are copied they are passed as <code>'''"files"'''</code> Groovy variable of type <code>'''List<File>'''</code> to the snippet. Its return type is ignored since there's nothing left to do with <code>'''"files"'''</code> after this step.

When files are [[#Uploading files: SCP, FTP|uploaded]] their final location, where they're uploaded to, is specified in <code>'''"files"'''</code>.

<code>'''<process>'''</code> works similarly for <code>'''<pack>'''</code>, <code>'''<unpack>'''</code> and <code>'''<mkdir>'''</code> operations where it processes files packed, unpacked or directory created. It is ignored for <code>'''<clean>'''</code> operation.


== Supporting Groovy classes with <classpath> ==

Sometimes Groovy logic can't be expressed by one-liner or you don't like the idea of putting too may Groovy code in POMs. In those cases you may want to call a regular Groovy class from the snippet:

<syntaxhighlight lang="xml">
<configuration>
    <groovyConfig>
        <classpath>${project.basedir}/src/main/scripts</classpath>
    </groovyConfig>
    <resources>
        ...
        <resource>
            <targetPath>${project.build.directory}/${zipName}.zip</targetPath>
            <directory>${build-dir}</directory>
            <pack>true</pack>
            <process>{{ Utils.report( files.first()) }}</process>
        </resource>
        ...
    </resources>
</configuration>
</syntaxhighlight>

<code>'''<groovyConfig>'''</code> allows to add classpath entries for Groovy snippet evaluation using either a single <code>'''<classpath>'''</code> entry or multiply <code>'''<classpaths>'''</code>:

<syntaxhighlight lang="xml">
<configuration>
    <groovyConfig>
        <classpaths>
            <classpath>${project.basedir}/src/main/scripts</classpath>
            <classpath>${project.basedir}/src/main/groovy</classpath>
            <classpath>${project.basedir}/src/main/utils</classpath>
        </classpaths>
        ...
    </groovyConfig>
</configuration>
</syntaxhighlight>

Now, <code>'''"src/main/scripts/Utils.groovy"'''</code>:

<syntaxhighlight lang="java">
import java.text.SimpleDateFormat

final class Utils
{
    private static final long Kb = (      1024L );
    private static final long Mb = ( Kb * 1024L );
    private static final long Gb = ( Mb * 1024L );
    private static final long Tb = ( Gb * 1024L );
    private static final long Pb = ( Tb * 1024L );

    def Utils ()
    {
    }

    static void report ( File file )
    {
        def sdf  = simpleDateFormat( 'dd/MM/yyyy HH:mm (\'GMT\'Z)', 'Israel' );
        println ( "[" + file + "]: " + size( file.size()) + " [" + sdf.format( new Date()) + "]" );
    }

    static SimpleDateFormat simpleDateFormat( String format, String timeZone )
    {
        SimpleDateFormat sdf = new SimpleDateFormat( format );
        sdf.setTimeZone( TimeZone.getTimeZone( timeZone ));
        return sdf;
    }

    static String size( Number bytes )
    {
        (( bytes < Kb ) ? "${ bytes } bytes" :
         ( bytes < Mb ) ? "${ bytes.intdiv( Kb )} Kb" :
         ( bytes < Gb ) ? "${ bytes.intdiv( Mb )} Mb" :
         ( bytes < Tb ) ? "${ bytes.intdiv( Gb )} Gb" :
         ( bytes < Pb ) ? "${ bytes.intdiv( Tb )} Tb" :
                          "${ bytes.intdiv( Pb )} Pb" );
    }
}
</syntaxhighlight>

<code>'''Utils.report()'''</code> produces a nice summary of archive size and timestamp creation:

<syntaxhighlight lang="xml">
...
[C:\.hudson\jobs\...\Something.zip]: 136 Mb [17/05/2010 18:09 (GMT+0300)]
...
</syntaxhighlight>


== <groovyConfig> ==

<code>'''<groovyConfig>'''</code> provides the following options:

<syntaxhighlight lang="xml">

<!-- Specifying multiple <classpaths>, <verbose> and <verboseBinding> -->
<configuration>
    <groovyConfig>
        <classpaths>
            <classpath>${project.basedir}/src/main/scripts</classpath>
            <classpath>${project.basedir}/src/main/groovy</classpath>
        </classpaths>
        <verbose>false</verbose>               <!-- "true" by default -->
        <verboseBinding>true</verboseBinding>  <!-- "false" by default -->
    </groovyConfig>
    <resources>
        ...
    </resources>
</configuration>

<!-- Specifying single <classpath> -->
<configuration>
    <groovyConfig>
        <classpath>${project.basedir}/src/main/scripts</classpath>
    </groovyConfig>
    <resources>
        ...
    </resources>
</configuration>
</syntaxhighlight>


* <code>'''<classpaths>'''</code> or <code>'''<classpath>'''</code> allow to use additional Groovy classes by adding locations to snippet classpath.
* <code>'''<verbose>'''</code> controls whether Groovy invocation is verbose and return results are displayed, on by default.
* <code>'''<verboseBinding>'''</code> controls whether Groovy binding is dumped before snippet is invoked, off by default.
* See [http://evgeny-goldin.com/wiki/Maven-properties-plugin <code>'''"maven-properties-plugin"'''</code>] for creating Maven properties with Groovy. Those properties can later be used as usual variables in Groovy <code>'''<process>'''</code> and <code>'''<filter>'''</code> snippets.


= Additional <configuration> options =

As mentioned [[#<configuration>|above]], <code>'''"maven-copy-plugin"'''</code> only requires some <code>'''<resources>'''</code> to get going.
But some other configurations can also be applied to alter its default behavior.


== <runIf> ==

<code>'''<runIf>'''</code> runs a [[#Groovy "extension points"|Groovy snippet]] to determine if plugin or <code>'''<resource>'''</code> should or should not be invoked. Snippet's return value converted to <code>'''boolean'''</code> with <code>'''Boolean.valueOf( String.valueOf( value ))'''</code>.


<syntaxhighlight lang="xml">
<!-- Specifying <runIf> for all <resources> -->
<configuration>
    <runIf>{{ ... }}</runIf>
    <resources>
        ...
    </resources>
</configuration>

<!-- Specifying <runIf> for specific <resource> -->
<resource>
    <runIf>{{ ... }}</runIf>
    ...
</resource>
</syntaxhighlight>


Some <code>'''<runIf>'''</code> examples:


{| border="1" cellspacing="0" cellpadding="5" class="wikitable"
|-
! width="600px" | Code
! Description
|-
| <code>'''<runIf><nowiki>{{ something != "none" }}</nowiki></runIf>'''</code>
| Only run if Maven property <code>'''${something}'''</code>, being available as [[#Maven properties as Groovy variables|Groovy variable]], isn't equal to <code>'''"none"'''</code>
|-
| <code>'''<runIf><nowiki>{{ new File( distDir, "config.xml" ).isFile() }}</nowiki></runIf>'''</code>
| Only run if <code>'''"${distDir}/config.xml"'''</code> file is available, assuming you have <code>'''${distDir}'''</code> property set
|-
| <code>'''<runIf><nowiki>{{ new File( project.basedir, 'src' ).isDirectory() }}</nowiki></runIf>'''</code>
| Only run if <code>'''"src"'''</code> directory is available in the base directory
|-
| <code>'''<runIf><nowiki>{{ compilationSuccess }}</nowiki></runIf>'''</code>
| Only run if <code>'''"compilationSuccess"'''</code> is set by [http://evgeny-goldin.com/wiki/Maven-properties-plugin another plugin] to <code>'''"true"'''</code> or <code>'''true'''</code>
|-
| <code>'''<runIf><nowiki>{{ project.basedir.listFiles().any{ it.name.endsWith( '.sln' ) }}}</nowiki></runIf>'''</code>
| Only run if <code>'''"*.sln"'''</code> files are available in the base directory
|}


== <verbose> ==

A boolean flags that can be set to control whether files copied, packed or unpacked are displayed. Default value is <code>'''"true"'''</code>.

<syntaxhighlight lang="xml">
<!-- Specifying <verbose> for all <resources> -->
<configuration>
    <verbose>false</verbose>
    <resources>
        ...
    </resources>
</configuration>

<!-- Specifying <verbose> for specific <resource> -->
<resource>
    <verbose>false</verbose>
    ...
</resource>
</syntaxhighlight>


== <skipIdentical> ==

Another boolean flags that can be set per single <code>'''<resource>'''</code> or per all <code>'''<resources>'''</code>. Default value is <code>'''"false"'''</code>.

<syntaxhighlight lang="xml">
<!-- Specifying <skipIdentical> for all <resources> -->
<configuration>
    <skipIdentical>true</skipIdentical>
    <resources>
       ...
    </resources>
</configuration>

<!-- Specifying <skipIdentical> for specific <resource> -->
<resource>
    <skipIdentical>true</skipIdentical>
    ...
</resource>
</syntaxhighlight>


* <code>'''<skipIdentical>'''</code> attempts to speed up builds and skip copying of files that are already copied, off by default.

* When this flag is turned on, plugin will analyze each file before copying and if destination file already exists, has identical length and <code>'''"lastModified"'''</code> timestamp, no copying will be made. It is useful for copying large number of static resources like <code>'''"*.html"'''</code> or image files: once done there's no need to overwrite them again. Note that in order to save time and run very fast, the plugin doesn't do any content-related checks (like MD5 calculation) for <code>'''<skipIdentical>'''</code>.

* Since <code>'''"mvn clean"'''</code> takes care of any previously created or copied files, this option is useful for "lightweight" builds, running without <code>'''"clean"'''</code>.


== <failIfNotFound> ==

Default plugin behavior is to fail if any <code>'''<resource>'''</code> doesn't find files to copy, pack, unpack or clean. This can be overridden with <code>'''<failIfNotFound>'''</code> boolean flag. Default value is <code>'''"true"'''</code>.

<syntaxhighlight lang="xml">
<!-- Specify <failIfNotFound> for all <resources> -->
<configuration>
    <failIfNotFound>false</failIfNotFound>
    <resources>
        ...
    </resources>
</configuration>

<!-- Specify <failIfNotFound> for specific <resource> -->
<resource>
    <failIfNotFound>false</failIfNotFound>
    ...
</resource>
</syntaxhighlight>


== <defaultExcludes> ==

By default, following files are excluded when copying or archiving files: <code>'''.settings'''</code>, <code>'''.classpath'''</code>, <code>'''.project'''</code>, <code>'''*.iws'''</code>, <code>'''*.iml'''</code>, <code>'''*.ipr'''</code>, <code>'''*~'''</code>, <code>'''#*#'''</code>, <code>'''.#*'''</code>, <code>'''%*%'''</code>, <code>'''._*'''</code>, <code>'''CVS'''</code>, <code>'''.cvsignore'''</code>, <code>'''RCS'''</code>, <code>'''SCCS'''</code>, <code>'''vssver.scc'''</code>, <code>'''.svn'''</code>, <code>'''.arch-ids'''</code>, <code>'''.bzr'''</code>, <code>'''.MySCMServerInfo'''</code>, <code>'''.DS_Store'''</code>, <code>'''.metadata'''</code>, <code>'''.hg'''</code>, <code>'''.git'''</code>, <code>'''BitKeeper'''</code>, <code>'''.git'''</code>, <code>'''ChangeSet'''</code>, <code>'''_darcs'''</code>, <code>'''.darcsrepo'''</code>, <code>'''-darcs-backup'''</code>, <code>'''.darcs-temp-mail'''</code>.

You can control this list or disable it with <code>'''<defaultExcludes>'''</code>, taking values of <code>'''"false"'''</code> or comma-separated list of exclude patterns.

<syntaxhighlight lang="xml">
<!-- Disable default excludes for all <resources> -->
<configuration>
    <defaultExcludes>false</defaultExcludes>
    <resources>
    ...
    </resources>
</configuration>

<!-- Disable default excludes for specific <resource> -->
<resource>
    <targetPath>${outputDir}</targetPath>
    <directory>${srcDir}</directory>
    <defaultExcludes>false</defaultExcludes>
    <preservePath>true</preservePath>
</resource>

<!-- Specify default excludes for all <resources> - comma separated list of patterns -->
<configuration>
    <defaultExcludes>**/.svn/**, **/.git/**</defaultExcludes>
    <resources>
    ...
    </resources>
</configuration>

<!-- Specify default excludes for specific <resource> - comma separated list of patterns -->
<resource>
    <targetPath>${outputDir}</targetPath>
    <directory>${srcDir}</directory>
    <defaultExcludes>.gitignore</defaultExcludes>
    <preservePath>true</preservePath>
</resource>
</syntaxhighlight>


= Tips and Tricks =


== Comment each <resource> ==

I found it highly useful to comment each <code>'''<resource>'''</code> when there are many of them:

<syntaxhighlight lang="xml">
<configuration>
    <resources>
        <!-- ~~~~~~~~~~~~~~~~~~~ -->
        <!-- Copying XML congigs -->
        <!-- ~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Copying third-party libraries -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Copying other dependencies -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Collecting *.bat files -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Creating final archive -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
    </resources>
</configuration>
</syntaxhighlight>

Otherwise, it is very easy to loose the sight of what's going on with too many <code>'''<resources>'''</code>.


== Group relative <resource> sections together ==

It also helps organizing similar <code>'''<resource>'''</code> section close one to another and document them properly:

<syntaxhighlight lang="xml">
<configuration>
    <resources>
        <!-- ~~~~~~~~~~~ -->
        <!-- "ct/var/im" -->
        <!-- ~~~~~~~~~~~ -->
        <resource>
            <targetPath>${project.build.outputDirectory}/ct/var/im</targetPath>
            ...
        </resource>
        <resource>
            <targetPath>${project.build.outputDirectory}/ct/var/im</targetPath>
            ...
        </resource>
        <resource>
            <targetPath>${project.build.outputDirectory}/ct/var/im</targetPath>
            ...
        </resource>
        <!-- ~~~~~~~~ -->
        <!-- "ct/bin" -->
        <!-- ~~~~~~~~ -->
        <resource>
            <targetPath>${project.build.outputDirectory}/ct/bin</targetPath>
            ...
        </resource>
        <resource>
            <targetPath>${project.build.outputDirectory}/ct/bin</targetPath>
            ...
        </resource>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Creating final archive -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            ...
        </resource>
    </resources>
</configuration>
</syntaxhighlight>


== Copy as much as you can within a single <resource> ==

When there are many files from various folders that should be copied to the same <code>'''<targetPath>'''</code> I try to get them all with a '''single <code><resource></code>''':

<syntaxhighlight lang="xml">
<configuration>
    <resources>
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~ -->
        <!-- Copying all XML configs -->
        <!-- ~~~~~~~~~~~~~~~~~~~~~~~ -->
        <resource>
            <targetPath>${project.build.outputDirectory}/conf</targetPath>
            <directory>/some/base/dir</directory>
            <includes>
                <include>some/project/dir/**/*.xml</include>
                <include>another/project/dir/**/*.xml</include>
                <include>some/other/project/dir/**/*.xml</include>
                ...
            </includes>
        </resource>
    </resources>
</configuration>
</syntaxhighlight>

'''Remember how [[#Keeping relative paths when copying: <preservePath>|<code><preservePath></code>]] works''', this examples assumes we want all matched XML files end up in the same <code>'''"${project.build.outputDirectory}/conf"'''</code> directory, effectively flattening their structures.


== Creating new files ==

Strictly speaking, it is not possible to create new files with <code>'''"maven-copy-plugin"'''</code>. Having said that, new text files can be created by "copying" any other text file, like <code>'''"${project.basedir}/pom.xml"'''</code>, and [[#<replaces>|replacing]] its entire content with the new one:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    <file>${project.basedir}/pom.xml</directory>
    <destFileName>fileName.xml</destFileName>
    <replace>
        <to>
             .. New file content goes here ..
        </to>
    </replace>
</resource>
</syntaxhighlight>


The following examples creates an ''empty'' new file:

<syntaxhighlight lang="xml">
<resource>
    <targetPath>${project.build.outputDirectory}</targetPath>
    <file>${project.basedir}/pom.xml</directory>
    <destFileName>fileName.xml</destFileName>
    <replace>
        <to><!-- Nothing --></to>
    </replace>
</resource>
</syntaxhighlight>